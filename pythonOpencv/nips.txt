
print(training_data[0])
#plt.imshow(training_data[0][0], cmap="gray")
#plt.show()

#CREATING NEURAL NETWORK
class Net(nn.Module):
        
    def convs(self, x):
        #F.relu is activation function
        # max pooling over 2x2
        x = F.max_pool2d(F.relu(self.conv1(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv2(x)), (2, 2))
        x = F.max_pool2d(F.relu(self.conv3(x)), (2, 2))

        if self._to_linear is None:
            self._to_linear = x[0].shape[0]*x[0].shape[1]*x[0].shape[2]
        return x
    
    def forward(self, x):
        x = self.convs(x)#convolutions maxpull pass
        x = x.view(-1, self._to_linear)  # .view is reshape ... this flattens X before 
        x = F.relu(self.fc1(x))#pass the convolution through fully connected linear
        x = self.fc2(x) # bc this is our output layer. No activation here.
        return F.softmax(x, dim=1)

    def __init__(self):
        super().__init__()
        #Number of Channel 1,32,64, OUPUT FEATURE 32, 64, 128, KERNEL SIZE 5x5 
        #LAYER 1 CONVOLUTIONAL THIS ARE 2D CONVOLUTIONAL LAYERS
        self.conv1 = nn.Conv2d(1,32,5)
        #LAYER 2 CONVOLUTIONAL THIS ARE 2D CONVOLUTIONAL LAYERS
        self.conv2 = nn.Conv2d(32,64,5)
        #LAYER 3 CONVOLUTIONAL THIS ARE 2D CONVOLUTIONAL LAYERS
        self.conv3 = nn.Conv2d(64,128,5)
        
        x = torch.randn(50,50).view(-1,1,50,50)
        self._to_linear = None
        self.convs(x)
        
        #INPUT HxW, how many Neurals to create (its call Dense Layer)
        #LAYER LINEAR 1
        self.fc1 = nn.Linear(self._to_linear, 512) #flattening.
        #LAYER LINEAR 2
        self.fc2 = nn.Linear(512, 2) # 512 in, 2 out bc we're doing 2 classes (dog vs cat).
        
        
        

net = Net()
print(net)

#TRAINING DATASET PREPARATION
optimizer = optim.Adam(net.parameters(), lr=0.001)
#mean square evaluation for loss
loss_function = nn.MSELoss()

#converting dataset
X = torch.Tensor([i[0] for i in training_data]).view(-1,50,50)
X = X/255.0
y = torch.Tensor([i[1] for i in training_data])

#separate train and test dataset
VAL_PCT = 0.1  # lets reserve 10% of our data for validation
val_size = int(len(X)*VAL_PCT)
print(val_size)
for tag in y:
    print(tag)
#slice
train_X = X[:-val_size]
train_y = y[:-val_size]

test_X = X[-val_size:]
test_y = y[-val_size:]
print(len(train_X), len(test_X))

#TRAINNING
BATCH_SIZE = 100
EPOCHS = 1

for epoch in range(EPOCHS):# from 0, to the len of x, stepping BATCH_SIZE at a time. [:50] ..for now just to dev
    for i in tqdm(range(0, len(train_X), BATCH_SIZE)): 
        #print(f"{i}:{i+BATCH_SIZE}")
        batch_X = train_X[i:i+BATCH_SIZE].view(-1, 1, 50, 50)
        batch_y = train_y[i:i+BATCH_SIZE]
        
        net.zero_grad()

        outputs = net(batch_X)
        loss = loss_function(outputs, batch_y)
        loss.backward()
        optimizer.step()    # Does the update

print(f"Epoch: {epoch}. Loss: {loss}")
#VALIDATING DATA
correct = 0
total = 0
with torch.no_grad():
    for i in tqdm(range(len(test_X))):
        real_class = torch.argmax(test_y[i])
        net_out = net(test_X[i].view(-1, 1, 50, 50))[0]  # returns a list, 
        predicted_class = torch.argmax(net_out)

        if predicted_class == real_class:
            correct += 1
        total += 1
print("Accuracy: ", round(correct/total, 3))